
services:
  # 1. MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: mysql-ticket
    restart: always
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=ticket_system
    volumes:
      - mysql-data:/var/lib/mysql
      - ~/conf/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - ticket-system-net

  # 2. Redis 缓存
  redis:
    image: redis:7.0
    container_name: redis-ticket
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --requirepass 123456 # 设置密码
    volumes:
      - redis-data:/data
    networks:
      - ticket-system-net

  # 3. Zookeeper (Kafka 依赖)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper-ticket
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ticket-system-net

  # 4. Kafka 消息队列
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-ticket
    restart: always
    ports:
      - "29092:29092" # 暴露给宿主机（我们的Java应用）的端口
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-ticket:2181'
      # 关键配置：同时为容器内和容器外（宿主机）配置监听器
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-ticket:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ticket-system-net
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # 5. Nacos 服务注册与发现 & 配置中心
  nacos:
    image: nacos/nacos-server:v2.2.3
    container_name: nacos-ticket
    restart: always
    ports:
      - "8848:8848" # 控制台端口
      - "9848:9848" # gRPC 端口
      - "9849:9849"
    environment:
      - MODE=standalone # 单机模式
      - PREFER_HOST_MODE=hostname
    volumes:
      - nacos-logs:/home/nacos/logs
    networks:
      - ticket-system-net

  # 6. Prometheus 监控
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus-ticket
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # 挂载配置文件
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - ticket-system-net

  # 7. Grafana 可视化面板
  grafana:
    image: grafana/grafana:9.5.3
    container_name: grafana-ticket
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - ticket-system-net

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ticket-system-net

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - ./promtail:/etc/promtail
      # 关键：将你本地的日志目录挂载到 Promtail 容器中
      # 这里假设你的所有微服务模块都在 ticketing-sys-parent 下
      # 并且它们的日志都输出到各自模块的 logs 目录下
      - ./logs:/logs
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - ticket-system-net


  connect:
    image: debezium/connect:2.1
    container_name: connect-ticket
    restart: always
    ports:
      - "18083:8083"
    depends_on:
      - kafka
    environment:
      BOOTSTRAP_SERVERS: 'kafka-ticket:9092'
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs_ticket
      OFFSET_STORAGE_TOPIC: connect_offsets_ticket
      STATUS_STORAGE_TOPIC: connect_statuses_ticket
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    networks:
      - ticket-system-net

  connect-configurator:
    image: curlimages/curl:latest # 使用一个非常轻量的、只包含 curl 的镜像
    container_name: connect-configurator-ticket
    depends_on:
      - connect # 依赖 connect 服务
    networks:
      - ticket-system-net
    volumes:
      - ./connect-conf:/config/ # 将我们的配置目录挂载到容器内
    command: sh /config/configure-connect.sh # 容器启动后执行的命令
    restart: on-failure # 如果配置失败，可以尝试重启

# 定义数据卷
volumes:
  mysql-data:
  redis-data:
  nacos-logs:
  prometheus-data:
  grafana-data:

# 定义网络
networks:
  ticket-system-net:
    driver: bridge
