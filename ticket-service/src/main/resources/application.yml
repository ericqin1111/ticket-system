server:
  port: 8001
spring:
  application:
    name: ticket-service
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
  data:
    redis:
      host: localhost
      port: 6379
      password: 123456
      database: 0
  # --- Kafka配置 ---
  kafka:
    bootstrap-servers: localhost:29092
    consumer:
      group-id: ticket_update_group # 定义消费者组
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  # --- 数据库配置 ---
  datasource:
    url: jdbc:mysql://localhost:3306/ticket_system?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    username: root
    password: root
# MyBatis-Plus 配置
mybatis-plus:
  mapper-locations: classpath:/mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
jetcache:
  # 打印缓存访问统计信息的时间间隔，0表示关闭。开发时可设为60秒，便于观察。
  statIntervalMinutes: 15
  # 缓存区域（Area）默认会作为Key的前缀，关闭它可以让Redis中的Key更简洁。
  areaInCacheName: false
  local:
    default:
      type: caffeine # 指定L1缓存类型为Caffeine
      keyConvertor: fastjson2 # Key的序列化方式
      expireAfterWrite: 10m # L1的默认过期时间：写入后10分钟
      maximumSize: 5000     # L1的最大容量：5000个条目，防止内存溢出
  # 定义远程缓存（L2）的通用规范
  remote:
    default:
      type: redis # 指定L2缓存类型为Redis
      keyConvertor: fastjson2 # Key的序列化方式
      valueEncoder: java # Value的编码器
      valueDecoder: java # Value的解码器
      expireAfterWrite: 60m # L2的默认过期时间：写入后60分钟
      host: 127.0.0.1
      port: 6379
      password: 123456
      poolConfig:
        minIdle: 5
        maxIdle: 20
        maxTotal: 50
#  caches:
#    priceTierCache: # 定义一个名为 "priceTierCache" 的缓存实例
#      cacheType: BOTH # ★★★ 最关键的配置：指定这是一个二级缓存（本地+远程）
#      localExpire: 5m   # 单独为此缓存实例指定L1的过期时间为5分钟（覆盖local.default）
#      expire: 60m       # 单独为此缓存实例指定L2的过期时间为60分钟（覆盖remote.default）